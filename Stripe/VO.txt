1. coding: 
email invoice:?

Rate limit:
https://www.1point3acres.com/bbs/thread-607064-1-1.html
给时间和 limit， 每个用户不能超过 limit。 写tests是重点。比如，同一个user，2秒内只能call 5次
rate limiter 纯coding，没什么需要设计的，因为条件都给得很清楚了，是一个toy的rate limiter。我写的用的hashmap，记录api call 和 timestamp，每来一个timestamp就看hm里相应api call之前的timestamp，看给定time frame内有没有超过limit数目，如果超过了，就throw exception，如果没有超过就push back new timestamp。我这不一定是最好的解法，做得也比较粗糙，以及对方要求了时间精度，用integer不行，我们假设的是milliesecond

account balance:
账户转账实现所有account的存款大于100


load balancing:
https://www.1point3acres.com/bbs/thread-816571-1-1.html
题目： load balancing。 give a list of server name, e.g.["a", "b", "c"]。 然后要求route requests， request有自己的weight, e.g. route(1) -> "a", route(1) -> "b"。 requests 要route 到load 最轻的server， 如果多个server的load 相同，按照accending order

https://www.1point3acres.com/bbs/thread-908575-1-1.html
第二轮Coding，设计load balancer，不难，地里面经写的不是很细。第一问就是每个request有一个weight，我用PQ存，每次找最小的serve。第二问是每个request有TTL，商量后不考虑distributed和多线程，我propose lazy delete TTL，每次有request时候直接brute force PQ里的所有request。follow up了一个我提到的test问题，我觉得用一个clock最好，test的时候可以把fake clock穿进去，就不用thread.sleep来test了 which is flaky.

follow up：
request 增加需要process的时间，process 完server的load 要减去processed req's weight. e.g. route(2, 0.1) -> "a", route(1, 0.3) -> "b", sleep(0.1), route(2, 0.1) -> "a"


2. integration: 
https://www.1point3acres.com/bbs/thread-908575-1-1.html
bikemap.这个一定要多练习，写代码快一点，我用的Java，光用define data model，加上jackson data binding都花了好多时‍‌‌‍‍‍‌‍间。最后差一点点没有做完。

https://www.1point3acres.com/bbs/thread-767545-1-1.html
Integration就是用python requests library对一个restful api发request。题目都很简单，稍微熟悉一下python requests lib就好了.
https://github.com/Luzifer/staticmap
1. repo里有个json文件，里面存了很多坐标。让你读进来，把前10个坐标打出来。这些坐标之后会用到。
2. 给指定url发送http request，会收到一个图片，是stripe的地图。request是个json，都已经写好了，发出去就行了，把response存成图片
3. 还是给同一个url发送http request，但是这一次要往request里加一些东西，加的就是第一题里的那些坐标。每个坐标会指定颜色等信息。完成后你收到的图片和第二题一模一样，只不过多了从某个点到stripe hq的路径。这些路径的坐标就是你request里加的坐标


Request replay? 根据给定的json文件, replay http re‍‌‌‍‍‍‌‍quests 并验证response的 status code

3. debug: 
https://www.1point3acres.com/bbs/thread-888652-1-1.html

requests: 这道题只有一个bug，就是redirect timeout的那一个。提示大家可以对比一下通过的testcase和failed的input有什么区别.

Mako: 3 bugs?
这里简单说下比较难找的bug在哪，节省各位时间：mako少输出一行pass，直接全文搜writeline('pass')，他的判断条件没考虑comment。requests timeout是因为重定向后再次请求时，bytesio指针没有重置回去，可以看下bytesio的api，用seek()和tell()改。

找bug的话他是会给你个mako的fork。 repo issues 里有列出来几个bug 只要run pytest就会有几个tests fail。 stripe 每轮可以用自己的ide然后screen share， 我是用pycharm然后加breakpoint。

关于Mako bug squash这道，地里可以下载到有bug的Mako repo。本地跑pytest会出现8个failure，全都是是跟comment block相关，找到了bug是在判断的时候出了些问题，就把if的condition改一下，所有的test都可以通过了。
这样的话是不是就完成要求了？为什么会有两个bugs，是下载的Mako repo已经修复了其中一个bug？还是面试时提供的Mako repo里会有更多test failure？

找python mako里的bug， 可以使用ide。 我是用intellij 然后放breakpoint 慢慢找。 第一个挺好找的，第二个有一点麻烦因为要研究AST (找出来了，但是说实话挺tricky...不方便直接把答案说出来。用ide多放断点然后看valuables。还有就是看看library里其他的helper functions)?


https://www.1point3acres.com/bbs/thread-905407-1-1.html
给一个解析日期的python库arrow，bug是发生在解析月份和到期日的时候，计算错误，可以从unitest入手，打印一些信息

